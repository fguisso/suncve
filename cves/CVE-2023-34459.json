{"cveId": "CVE-2023-34459", "cwe": ["CWE-354", "CWE-354", "CWE-354"], "cvss": [{"baseScore": "5.3", "version": "3.1", "Attack Vector": "None", "Attack Complexity": "High", "Privileges Required": "Low", "User Interaction": "None", "Scope": "Unchaged", "Confidentiality Impact": "None", "Integrity Impact": "High", "Availability Impact": "None"}], "references": ["https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-wprv-93r4-jj2p", "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/4d2383e17186be3e8ccf5a442e9686ecc7de1c55", "https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.2"], "description": ["OpenZeppelin Contracts is a library for smart contract development. Starting in version 4.7.0 and prior to version 4.9.2, when the `verifyMultiProof`, `verifyMultiProofCalldata`, `procesprocessMultiProof`, or `processMultiProofCalldat` functions are in use, it is possible to construct merkle trees that allow forging a valid multiproof for an arbitrary set of leaves.\n\nA contract may be vulnerable if it uses multiproofs for verification and the merkle tree that is processed includes a node with value 0 at depth 1 (just under the root). This could happen inadvertedly for balanced trees with 3 leaves or less, if the leaves are not hashed. This could happen deliberately if a malicious tree builder includes such a node in the tree.\n\nA contract is not vulnerable if it uses single-leaf proving (`verify`, `verifyCalldata`, `processProof`, or `processProofCalldata`), or if it uses multiproofs with a known tree that has hashed leaves. Standard merkle trees produced or validated with the @openzeppelin/merkle-tree library are safe.\n\nThe problem has been patched in version 4.9.2.\n\nSome workarounds are available. For those using multiproofs: When constructing merkle trees hash the leaves and do not insert empty nodes in your trees. Using the @openzeppelin/merkle-tree package eliminates this issue. Do not accept user-provided merkle roots without reconstructing at least the first level of the tree. Verify the merkle tree structure by reconstructing it from the leaves."], "published": "2023-06-16T23:15:08.817", "state": "PUBLIC", "vendorName": ["OpenZeppelin"], "productName": ["openzeppelin-contracts"], "github": {"advisories": ["https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-wprv-93r4-jj2p"], "commits": ["https://github.com/OpenZeppelin/openzeppelin-contracts/commit/4d2383e17186be3e8ccf5a442e9686ecc7de1c55"], "pocAdvisorie": {}, "repo": "https://github.com/OpenZeppelin/openzeppelin-contracts/", "info": {"exist": true, "topics": ["ethereum", "evm", "security", "smart-contracts", "solidity"], "langs": {"Solidity": 1339567, "JavaScript": 1293419, "Python": 170892, "Ruby": 95065, "Shell": 9308, "Makefile": 1714}, "avatar": "https://avatars.githubusercontent.com/u/20820676?v=4", "stargazers": 25643, "language": "Solidity"}}, "pocList": []}