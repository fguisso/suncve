{"cveId": "CVE-2022-35948", "cwe": ["CWE-74", "CWE-93", "CWE-74", "CWE-93"], "cvss": [{"baseScore": "5.3", "version": "3.1", "Attack Vector": "None", "Attack Complexity": "Low", "Privileges Required": "None", "User Interaction": "None", "Scope": "Unchaged", "Confidentiality Impact": "None", "Integrity Impact": "Low", "Availability Impact": "None"}], "references": ["https://github.com/nodejs/undici/releases/tag/v5.8.2", "https://github.com/nodejs/undici/security/advisories/GHSA-f772-66g8-q5h3", "https://github.com/nodejs/undici/commit/66165d604fd0aee70a93ed5c44ad4cc2df395f80"], "description": ["undici is an HTTP/1.1 client, written from scratch for Node.js.`=< undici@5.8.0` users are vulnerable to _CRLF Injection_ on headers when using unsanitized input as request headers, more specifically, inside the `content-type` header. Example: ``` import { request } from 'undici' const unsanitizedContentTypeInput = 'application/json\\r\\n\\r\\nGET /foo2 HTTP/1.1' await request('http://localhost:3000, { method: 'GET', headers: { 'content-type': unsanitizedContentTypeInput }, }) ``` The above snippet will perform two requests in a single `request` API call: 1) `http://localhost:3000/` 2) `http://localhost:3000/foo2` This issue was patched in Undici v5.8.1. Sanitize input when sending content-type headers using user input as a workaround."], "published": "2022-08-15T11:21:38.353", "state": "PUBLIC", "vendorName": ["nodejs"], "productName": ["undici"], "github": {"advisories": ["https://github.com/nodejs/undici/security/advisories/GHSA-f772-66g8-q5h3"], "commits": ["https://github.com/nodejs/undici/commit/66165d604fd0aee70a93ed5c44ad4cc2df395f80"], "pocAdvisorie": {}, "repo": "https://github.com/nodejs/undici/", "info": {"exist": true, "topics": ["client", "http", "nodejs"], "langs": {"JavaScript": 2562045, "TypeScript": 90936, "Shell": 170}, "avatar": "https://avatars.githubusercontent.com/u/9950313?v=4", "stargazers": 6689, "language": "JavaScript"}}, "pocList": []}