{"cveId": "CVE-2021-29474", "cwe": ["CWE-20", "CWE-22", "CWE-22", "CWE-20", "CWE-22", "CWE-22"], "cvss": [{"baseScore": "4.7", "version": "3.1", "Attack Vector": "None", "Attack Complexity": "Low", "Privileges Required": "None", "User Interaction": "Required", "Scope": "Complete", "Confidentiality Impact": "Low", "Integrity Impact": "None", "Availability Impact": "None"}], "references": ["https://github.com/hedgedoc/hedgedoc/security/advisories/GHSA-p528-555r-pf87"], "description": ["HedgeDoc (formerly known as CodiMD) is an open-source collaborative markdown editor. An attacker can read arbitrary `.md` files from the server's filesystem due to an improper input validation, which results in the ability to perform a relative path traversal. To verify if you are affected, you can try to open the following URL: `http://localhost:3000/..%2F..%2FREADME#` (replace `http://localhost:3000` with your instance's base-URL e.g. `https://demo.hedgedoc.org/..%2F..%2FREADME#`). If you see a README page being rendered, you run an affected version. The attack works due the fact that the internal router passes the url-encoded alias to the `noteController.showNote`-function. This function passes the input directly to findNote() utility function, that will pass it on the the parseNoteId()-function, that tries to make sense out of the noteId/alias and check if a note already exists and if so, if a corresponding file on disk was updated. If no note exists the note creation-function is called, which pass this unvalidated alias, with a `.md` appended, into a path.join()-function which is read from the filesystem in the follow up routine and provides the pre-filled content of the new note. This allows an attacker to not only read arbitrary `.md` files from the filesystem, but also observes changes to them. The usefulness of this attack can be considered limited, since mainly markdown files are use the file-ending `.md` and all markdown files contained in the hedgedoc project, like the README, are public anyway. If other protections such as a chroot or container or proper file permissions are in place, this attack's usefulness is rather limited. On a reverse-proxy level one can force a URL-decode, which will prevent this attack because the router will not accept such a path."], "published": "2021-04-26T22:15:08.900", "state": "PUBLIC", "vendorName": ["hedgedoc"], "productName": ["hedgedoc"], "github": {"advisories": ["https://github.com/hedgedoc/hedgedoc/security/advisories/GHSA-p528-555r-pf87"], "commits": [], "pocAdvisorie": {"url": "https://github.com/hedgedoc/hedgedoc/security/advisories/GHSA-p528-555r-pf87", "kw": ["poc"]}, "repo": "https://github.com/hedgedoc/hedgedoc/", "info": {"exist": true, "topics": ["codimd", "collaboration", "diagrams", "editor", "hackmd", "hacktoberfest", "hedgedoc", "markdown", "notes", "real-time"], "langs": {"TypeScript": 2963193, "SCSS": 99279, "JavaScript": 13932, "Dockerfile": 4089, "Shell": 3027, "CSS": 1071}, "avatar": "https://avatars.githubusercontent.com/u/67865462?v=4", "stargazers": 5796, "language": "TypeScript"}}, "pocList": []}