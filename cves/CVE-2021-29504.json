{"cveId": "CVE-2021-29504", "cwe": ["CWE-295", "CWE-295"], "cvss": [{"baseScore": "9.1", "version": "3.1", "Attack Vector": "None", "Attack Complexity": "Low", "Privileges Required": "None", "User Interaction": "None", "Scope": "Unchaged", "Confidentiality Impact": "High", "Integrity Impact": "High", "Availability Impact": "None"}], "references": ["https://github.com/wp-cli/wp-cli/security/advisories/GHSA-rwgm-f83r-v3qj", "https://github.com/wp-cli/checksum-command/pull/86", "https://github.com/wp-cli/config-command/pull/128", "https://github.com/wp-cli/core-command/pull/186", "https://github.com/wp-cli/extension-command/pull/287", "https://github.com/wp-cli/package-command/pull/138", "https://github.com/wp-cli/wp-cli/pull/5523"], "description": ["WP-CLI is the command-line interface for WordPress. An improper error handling in HTTPS requests management in WP-CLI version 0.12.0 and later allows remote attackers able to intercept the communication to remotely disable the certificate verification on WP-CLI side, gaining full control over the communication content, including the ability to impersonate update servers and push malicious updates towards WordPress instances controlled by the vulnerable WP-CLI agent, or push malicious updates toward WP-CLI itself. The vulnerability stems from the fact that the default behavior of `WP_CLI\\Utils\\http_request()` when encountering a TLS handshake error is to disable certificate validation and retry the same request. The default behavior has been changed with version 2.5.0 of WP-CLI and the `wp-cli/wp-cli` framework (via https://github.com/wp-cli/wp-cli/pull/5523) so that the `WP_CLI\\Utils\\http_request()` method accepts an `$insecure` option that is `false` by default and consequently that a TLS handshake failure is a hard error by default. This new default is a breaking change and ripples through to all consumers of `WP_CLI\\Utils\\http_request()`, including those in separate WP-CLI bundled or third-party packages. https://github.com/wp-cli/wp-cli/pull/5523 has also added an `--insecure` flag to the `cli update` command to counter this breaking change. There is no direct workaround for the default insecure behavior of `wp-cli/wp-cli` versions before 2.5.0. The workaround for dealing with the breaking change in the commands directly affected by the new secure default behavior is to add the `--insecure` flag to manually opt-in to the previous insecure behavior."], "published": "2021-06-07T21:15:08.387", "state": "PUBLIC", "vendorName": ["wp-cli"], "productName": ["wp-cli"], "github": {"advisories": ["https://github.com/wp-cli/wp-cli/security/advisories/GHSA-rwgm-f83r-v3qj"], "commits": [], "pocAdvisorie": {}, "repo": "https://github.com/wp-cli/wp-cli/", "info": {"exist": true, "topics": ["cli", "framework", "hacktoberfest", "php", "wordpress", "wp-cli"], "langs": {"PHP": 566804, "Gherkin": 250663, "Shell": 5138, "Mustache": 573, "Batchfile": 42}, "avatar": "https://avatars.githubusercontent.com/u/1570774?v=4", "stargazers": 4908, "language": "PHP"}}, "pocList": []}