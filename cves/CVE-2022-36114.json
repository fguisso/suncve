{"cveId": "CVE-2022-36114", "cwe": ["CWE-400", "CWE-400", "CWE-400", "CWE-400", "CWE-400"], "cvss": [{"baseScore": "4.8", "version": "3.1", "Attack Vector": "None", "Attack Complexity": "High", "Privileges Required": "Low", "User Interaction": "Required", "Scope": "Unchaged", "Confidentiality Impact": "None", "Integrity Impact": "None", "Availability Impact": "High"}], "references": ["https://github.com/rust-lang/cargo/security/advisories/GHSA-2hvr-h6gw-qrxp", "https://github.com/rust-lang/cargo/commit/d1f9553c825f6d7481453be8d58d0e7f117988a7"], "description": ["Cargo is a package manager for the rust programming language. It was discovered that Cargo did not limit the amount of data extracted from compressed archives. An attacker could upload to an alternate registry a specially crafted package that extracts way more data than its size (also known as a \"zip bomb\"), exhausting the disk space on the machine using Cargo to download the package. Note that by design Cargo allows code execution at build time, due to build scripts and procedural macros. The vulnerabilities in this advisory allow performing a subset of the possible damage in a harder to track down way. Your dependencies must still be trusted if you want to be protected from attacks, as it's possible to perform the same attacks with build scripts and procedural macros. The vulnerability is present in all versions of Cargo. Rust 1.64, to be released on September 22nd, will include a fix for it. Since the vulnerability is just a more limited way to accomplish what a malicious build scripts or procedural macros can do, we decided not to publish Rust point releases backporting the security fix. Patch files are available for Rust 1.63.0 are available in the wg-security-response repository for people building their own toolchain. We recommend users of alternate registries to excercise care in which package they download, by only including trusted dependencies in their projects. Please note that even with these vulnerabilities fixed, by design Cargo allows arbitrary code execution at build time thanks to build scripts and procedural macros: a malicious dependency will be able to cause damage regardless of these vulnerabilities. crates.io implemented server-side checks to reject these kinds of packages years ago, and there are no packages on crates.io exploiting these vulnerabilities. crates.io users still need to excercise care in choosing their dependencies though, as the same concerns about build scripts and procedural macros apply here."], "published": "2022-09-14T18:15:10.830", "state": "PUBLIC", "vendorName": ["rust-lang"], "productName": ["cargo"], "github": {"advisories": ["https://github.com/rust-lang/cargo/security/advisories/GHSA-2hvr-h6gw-qrxp"], "commits": ["https://github.com/rust-lang/cargo/commit/d1f9553c825f6d7481453be8d58d0e7f117988a7"], "pocAdvisorie": {}, "repo": "https://github.com/rust-lang/cargo/", "info": {"exist": true, "topics": ["cargo", "package-manager", "rust"], "langs": {"Rust": 9047584, "Roff": 393764, "JavaScript": 15190, "Shell": 13680, "Python": 3902, "Dockerfile": 1592, "RenderScript": 44}, "avatar": "https://avatars.githubusercontent.com/u/5430905?v=4", "stargazers": 13370, "language": "Rust"}}, "pocList": []}