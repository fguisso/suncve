{"cveId": "CVE-2023-45288", "cwe": [], "cvss": [{"baseScore": "7.5", "version": "3.1", "Attack Vector": "None", "Attack Complexity": "Low", "Privileges Required": "None", "User Interaction": "None", "Scope": "Unchaged", "Confidentiality Impact": "None", "Integrity Impact": "None", "Availability Impact": "High"}], "references": ["https://go.dev/issue/65051", "https://go.dev/cl/576155", "https://groups.google.com/g/golang-announce/c/YgW0sx8mN3M", "https://pkg.go.dev/vuln/GO-2024-2687", "https://security.netapp.com/advisory/ntap-20240419-0009/", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QRYFHIQ6XRKRYBI2F5UESH67BJBQXUPT/", "http://www.openwall.com/lists/oss-security/2024/04/05/4", "http://www.openwall.com/lists/oss-security/2024/04/03/16"], "description": ["An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection."], "published": "2024-04-04T21:15:16.113", "state": "PUBLIC", "vendorName": ["Go standard library", "golang.org/x/net"], "productName": ["net/http", "golang.org/x/net/http2"], "github": {"advisories": [], "commits": [], "pocAdvisorie": null, "repo": null, "info": {}}, "pocList": ["https://github.com/hex0punk/cont-flood-poc", "https://github.com/hex0punk/cont-flood-poc"]}