{"cveId": "CVE-2020-24658", "cwe": ["CWE-770", "CWE-787", "CWE-770", "CWE-787"], "cvss": [{"baseScore": "7.8", "version": "3.1", "Attack Vector": "Low", "Attack Complexity": "Low", "Privileges Required": "Low", "User Interaction": "None", "Scope": "Unchaged", "Confidentiality Impact": "High", "Integrity Impact": "High", "Availability Impact": "High"}], "references": ["https://developer.arm.com/support/arm-security-updates/arm-compiler-5-stack-protection"], "description": ["Arm Compiler 5 through 5.06u6 has an error in a stack protection feature designed to help spot stack-based buffer overflows in local arrays. When this feature is enabled, a protected function writes a guard value to the stack prior to (above) any vulnerable arrays in the stack. The guard value is checked for corruption on function return; corruption leads to an error-handler call. In certain circumstances, the reference value that is compared against the guard value is itself also written to the stack (after any vulnerable arrays). The reference value is written to the stack when the function runs out of registers to use for other temporary data. If both the reference value and the guard value are written to the stack, then the stack protection will fail to spot corruption when both values are overwritten with the same value. For both the reference value and the guard value to be corrupted, there would need to be both a buffer overflow and a buffer underflow in the vulnerable arrays (or some other vulnerability that causes two separated stack entries to be corrupted)."], "published": "2020-12-24T18:15:12.517", "state": "PUBLIC", "vendorName": ["n/a"], "productName": ["n/a"], "github": {"advisories": [], "commits": [], "pocAdvisorie": null, "repo": null, "info": {}}, "pocList": []}